From 8560e0a7c0d00d0285f9ee56fef60dc392b41023 Mon Sep 17 00:00:00 2001
From: George Fu <nailao_5918@163.com>
Date: Wed, 23 Jun 2021 11:50:27 +0800
Subject: [PATCH 13/15] Remove NonVolatileMemory support

---
 RepRapFirmware/src/Hardware/ExceptionHandlers.cpp | 2 ++
 RepRapFirmware/src/Hardware/NonVolatileMemory.cpp | 8 +++++---
 RepRapFirmware/src/Platform/Platform.cpp          | 3 ++-
 3 files changed, 9 insertions(+), 4 deletions(-)

diff --git a/RepRapFirmware/src/Hardware/ExceptionHandlers.cpp b/RepRapFirmware/src/Hardware/ExceptionHandlers.cpp
index f0b8180..aeb456e 100644
--- a/RepRapFirmware/src/Hardware/ExceptionHandlers.cpp
+++ b/RepRapFirmware/src/Hardware/ExceptionHandlers.cpp
@@ -68,10 +68,12 @@
 		}
 
 		// Record the reason for the software reset
+		#if 0
 		NonVolatileMemory * const mem = new(Tasks::GetNVMBuffer(stk)) NonVolatileMemory;
 		SoftwareResetData * const srd = mem->AllocateResetDataSlot();
         srd->Populate(fullReason, stk);
         mem->EnsureWritten();
+		#endif
 	}
 
 #if LPC17xx
diff --git a/RepRapFirmware/src/Hardware/NonVolatileMemory.cpp b/RepRapFirmware/src/Hardware/NonVolatileMemory.cpp
index 336a252..8be48ed 100644
--- a/RepRapFirmware/src/Hardware/NonVolatileMemory.cpp
+++ b/RepRapFirmware/src/Hardware/NonVolatileMemory.cpp
@@ -4,6 +4,7 @@
  *  Created on: 24 Aug 2020
  *      Author: David
  */
+#if 0
 
 #include "NonVolatileMemory.h"
 
@@ -25,7 +26,7 @@ void NonVolatileMemory::EnsureRead() noexcept
 #if SAME5x
 		memcpyu32(reinterpret_cast<uint32_t*>(&buffer), reinterpret_cast<const uint32_t *>(SEEPROM_ADDR), sizeof(buffer)/sizeof(uint32_t));
 #elif LPC17xx || STM32F4
-		NVMEmulationRead(&buffer, sizeof(buffer));
+		//NVMEmulationRead(&buffer, sizeof(buffer));
 #elif SAM4E || SAM4S || SAME70
 		const bool cacheEnabled = Cache::Disable();
 		Flash::ReadUserSignature(reinterpret_cast<uint32_t*>(&buffer), sizeof(buffer)/sizeof(uint32_t));
@@ -69,7 +70,7 @@ void NonVolatileMemory::EnsureWritten() noexcept
 # if SAM4E || SAM4S || SAME70
 		Flash::EraseUserSignature();
 # elif LPC17xx  || STM32F4
-		NVMEmulationErase();
+		//NVMEmulationErase();
 # endif
 		state = NvmState::writeNeeded;
 	}
@@ -84,7 +85,7 @@ void NonVolatileMemory::EnsureWritten() noexcept
 			Cache::Enable();
 		}
 # elif LPC17xx  || STM32F4
-		NVMEmulationWrite(&buffer, sizeof(buffer));
+		//NVMEmulationWrite(&buffer, sizeof(buffer));
 # else
 #  error Unsupported processor
 # endif
@@ -181,4 +182,5 @@ void NonVolatileMemory::SetThermistorCalibration(unsigned int inputNumber, int8_
 	}
 }
 
+#endif
 // End
diff --git a/RepRapFirmware/src/Platform/Platform.cpp b/RepRapFirmware/src/Platform/Platform.cpp
index abeb169..20309c5 100644
--- a/RepRapFirmware/src/Platform/Platform.cpp
+++ b/RepRapFirmware/src/Platform/Platform.cpp
@@ -1891,7 +1891,7 @@ void Platform::Diagnostics(MessageType mtype) noexcept
 #endif
 	// Show the reset code stored at the last software reset
 	{
-
+        #if 0
 		NonVolatileMemory mem;
 		unsigned int slot;
 		const SoftwareResetData * const srd = mem.GetLastWrittenResetData(slot);
@@ -1903,6 +1903,7 @@ void Platform::Diagnostics(MessageType mtype) noexcept
 		{
 			srd->Print(mtype, slot);
 		}
+		#endif
 	}
 
 	// Show the current error codes
-- 
2.31.1.windows.1

